-- SET SQL_SAFE_UPDATES=0;

-- DROP DATABASE TL_TEST;
CREATE DATABASE IF NOT EXISTS TL_TEST;

USE TL_TEST;

-- TABLAS

-- Apps de contacto (Ejemplo: Whatsapp, Telegram o línea directa)
CREATE TABLE IF NOT EXISTS CONTACT_APPS (
  id VARCHAR(50) NOT NULL PRIMARY KEY,
  name VARCHAR(50) NOT NULL
);

-- Eventos
CREATE TABLE IF NOT EXISTS EVENTS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(500) NOT NULL,
  urlBg VARCHAR(500) NOT NULL DEFAULT 'https://images.pexels.com/photos/4240602/pexels-photo-4240602.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500',
  urlPresentation VARCHAR(500) NOT NULL DEFAULT '',
  requisites JSON NOT NULL DEFAULT '[]',
  objectives JSON NOT NULL DEFAULT '[]',
  benefits JSON NOT NULL DEFAULT '[]',
  topics JSON NOT NULL DEFAULT '[]',
  price DOUBLE NOT NULL DEFAULT 0,
  currency VARCHAR(50) NULL DEFAULT 'USD',
  platform VARCHAR(100) NOT NULL DEFAULT 'Google Meets',
  paymentLink VARCHAR(500) NULL DEFAULT '',
  paymentMethod VARCHAR(500) NULL DEFAULT '',
  paymentFacilities VARCHAR(500) NULL DEFAULT '',
  title VARCHAR(500) NOT NULL,
  about VARCHAR(1000) NOT NULL,
  `condition` VARCHAR(500) NULL DEFAULT '',
  timezoneText VARCHAR(200) NULL DEFAULT '',
  extraData JSON NULL DEFAULT '[]',
  alias VARCHAR(200) NOT NULL,
  whatsappGroup VARCHAR(500) NULL DEFAULT '',
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE EVENTS
ADD UNIQUE INDEX EVENTS_ALIAS_INDEX(alias);

-- Fechas de los eventos (Un evento puede tener varias fechas en las que se lleva a cabo. Se crea una tabla aparte para facilitar los queries)
CREATE TABLE IF NOT EXISTS EVENT_DATES (
	id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    eventId INT(10) ZEROFILL UNSIGNED NOT NULL ,
    `from` DATETIME NOT NULL,
	`until` DATETIME NOT NULL,
	recurrent BOOLEAN NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT 1,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE EVENT_DATES
ADD FOREIGN KEY (eventId) REFERENCES EVENTS(id);

-- Usuarios. Más adelante debemos guardar una tabla con sus preferencias (Más lector, escritor, etc)
CREATE TABLE USERS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(200) NOT NULL,
  emailVerified BOOLEAN NOT NULL DEFAULT 0,
  contactEmail VARCHAR(200) NULL,
  fName VARCHAR(200) NOT NULL,
  lName VARCHAR(200) NOT NULL,
  birthday DATETIME NOT NULL,  
  phone VARCHAR(50) NULL,
  appId VARCHAR(50) NOT NULL,
  pseudonym VARCHAR(200) NULL,
  followName VARCHAR(200) NOT NULL,
  numFollowers INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numHearts INT NOT NULL DEFAULT 0, -- BY TRIGGER
  urlProfileImg VARCHAR(500) NULL DEFAULT NULL,  
  networks JSON NOT NULL DEFAULT '[]',
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE USERS
ADD FOREIGN KEY (appId) REFERENCES CONTACT_APPS(id),
ADD UNIQUE INDEX USERS_EMAIL_INDEX (email),
ADD UNIQUE INDEX USERS_FOLLOWNAME_INDEX (followName);

-- Roles de los usuarios (Ejemplo: admin, moderador, colaborador)
CREATE TABLE USER_ROLES (
	id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

-- Roles por usuario (Un usuario puede ser admin, moderador, colaborador)
CREATE TABLE ROLES_BY_USER (
	userId INT(10) ZEROFILL UNSIGNED NOT NULL,
    roleId VARCHAR(50) NOT NULL,
	createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE ROLES_BY_USER
ADD PRIMARY KEY (userId, roleId),
ADD FOREIGN KEY (userId) REFERENCES USERS(id),
ADD FOREIGN KEY (roleId) REFERENCES USER_ROLES(id);

-- Inscripciones a los eventos
CREATE TABLE INSCRIPTIONS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  eventId INT(10) ZEROFILL UNSIGNED NOT NULL ,
  userId INT(10) ZEROFILL UNSIGNED NULL,
  name VARCHAR(200) NOT NULL,
  age TINYINT NOT NULL,
  phone VARCHAR(50) NOT NULL,
  email VARCHAR(200) NOT NULL,
  extraData JSON NULL DEFAULT '{}',
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE INSCRIPTIONS
ADD FOREIGN KEY (eventId) REFERENCES EVENTS(id),
ADD FOREIGN KEY (userId) REFERENCES USERS(id);

-- Servicios (Ejemplo: Diseño, críticas, booktrailers)
CREATE TABLE SERVICES (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100) NOT NULL  
);

-- Sub servicios (Por ejemplo, el servicio de diseños tiene portadas, banners)
CREATE TABLE SUBSERVICES (
  id VARCHAR(50) PRIMARY KEY,
  serviceId VARCHAR(50) NOT NULL,
  name VARCHAR(100) NOT NULL  
);

ALTER TABLE SUBSERVICES
ADD FOREIGN KEY (serviceId) REFERENCES SERVICES(id);

-- Servicios por usuario (Ejemplo: Críticas, diseños, booktrailers + sus respectivas condiciones)
CREATE TABLE SERVICES_BY_USER (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userId INT(10) ZEROFILL UNSIGNED NOT NULL,
  serviceId VARCHAR(50) NOT NULL,
  subServiceId VARCHAR(50) NULL,
  urlBg VARCHAR(500) NULL DEFAULT 'https://images.pexels.com/photos/4240602/pexels-photo-4240602.jpeg?',
  title VARCHAR(500) NOT NULL,
  about VARCHAR(500) NOT NULL,
  benefits JSON NOT NULL DEFAULT '[]',  
  requisites JSON NOT NULL DEFAULT '[]',
  teamPolicy VARCHAR(500) NOT NULL DEFAULT '',
  pricePolicy VARCHAR(500) NOT NULL DEFAULT '',
  contributePolicy VARCHAR(500) NOT NULL DEFAULT '',
  volunteerPolicy VARCHAR(500) NOT NULL DEFAULT '',
  timePolicy VARCHAR(500) NOT NULL DEFAULT '',
  minPrice DOUBLE NOT NULL DEFAULT 0,
  maxPrice DOUBLE NOT NULL DEFAULT 0,
  currency VARCHAR(50) NULL DEFAULT 'USD',
  extraData JSON NULL DEFAULT '[]',
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE SERVICES_BY_USER
ADD FOREIGN KEY (userId) REFERENCES USERS(id),
ADD FOREIGN KEY (serviceId) REFERENCES SERVICES(id),
ADD FOREIGN KEY (subServiceId) REFERENCES SUBSERVICES(id);

-- Editoriales
CREATE TABLE EDITORIALS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  about VARCHAR(1000) NOT NULL,
  followName VARCHAR(200) NOT NULL,  
  phone VARCHAR(50) NOT NULL,
  appId VARCHAR(50) NOT NULL,
  email VARCHAR(200) NOT NULL,
  numFollowers INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numHearts INT NOT NULL DEFAULT 0, -- BY TRIGGER
  urlProfileImg VARCHAR(500) NULL DEFAULT NULL,
  bgColor VARCHAR(10) NULL DEFAULT NULL,
  networks JSON NOT NULL DEFAULT '[]',
  acceptsMembers BOOLEAN NOT NULL DEFAULT 1,
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE EDITORIALS
ADD FOREIGN KEY (appId) REFERENCES CONTACT_APPS(id);

-- Servicios por editorial (Ejemplo: Críticas, diseños, booktrailers + sus respectivas condiciones)
CREATE TABLE SERVICES_BY_EDITORIAL (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  editorialId INT(10) ZEROFILL UNSIGNED NOT NULL,
  serviceId VARCHAR(50) NOT NULL,
  subServiceId VARCHAR(50) NULL,
  urlBg VARCHAR(500) NULL DEFAULT 'https://images.pexels.com/photos/4240602/pexels-photo-4240602.jpeg?',
  title VARCHAR(500) NOT NULL,
  about VARCHAR(500) NOT NULL,
  benefits JSON NOT NULL DEFAULT '[]',  
  requisites JSON NOT NULL DEFAULT '[]',
  teamPolicy VARCHAR(500) NOT NULL DEFAULT '',
  pricePolicy VARCHAR(500) NOT NULL DEFAULT '',
  contributePolicy VARCHAR(500) NOT NULL DEFAULT '',
  volunteerPolicy VARCHAR(500) NOT NULL DEFAULT '',
  timePolicy VARCHAR(500) NOT NULL DEFAULT '',
  minPrice DOUBLE NOT NULL DEFAULT 0,
  maxPrice DOUBLE NOT NULL DEFAULT 0,
  currency VARCHAR(50) NULL DEFAULT 'USD',
  extraData JSON NULL DEFAULT '[]',
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE SERVICES_BY_EDITORIAL
ADD FOREIGN KEY (editorialId) REFERENCES EDITORIALS(id),
ADD FOREIGN KEY (serviceId) REFERENCES SERVICES(id),
ADD FOREIGN KEY (subServiceId) REFERENCES SUBSERVICES(id);

-- Miembros de una editorial (Quién pertenece a qué editorial)
CREATE TABLE EDITORIAL_MEMBERS (
  userId INT(10) ZEROFILL UNSIGNED NOT NULL,
  editorialId INT(10) ZEROFILL UNSIGNED NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE EDITORIAL_MEMBERS
ADD PRIMARY KEY (userId, editorialId),
ADD FOREIGN KEY (userId) REFERENCES USERS(id),
ADD FOREIGN KEY (editorialId) REFERENCES EDITORIALS(id);

-- Roles de los miembros de una editorial (Ejemplo: Fundador, diseñador, crítico)
CREATE TABLE EDITORIAL_MEMBER_ROLES (
	id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

-- Roles por miembros de una editorial (Un miembro de editorial puede ser fundador, diseñador, crítico, escuchador, etc)
CREATE TABLE ROLES_BY_EDITORIAL_MEMBERS (
	userId INT(10) ZEROFILL UNSIGNED NOT NULL,
	editorialId INT(10) ZEROFILL UNSIGNED NOT NULL,
    roleId VARCHAR(50) NOT NULL
);

ALTER TABLE ROLES_BY_EDITORIAL_MEMBERS
ADD PRIMARY KEY (userId, editorialId, roleId),
ADD FOREIGN KEY (userId) REFERENCES USERS(id),
ADD FOREIGN KEY (editorialId) REFERENCES EDITORIALS(id),
ADD FOREIGN KEY (roleId) REFERENCES EDITORIAL_MEMBER_ROLES(id);

-- Permisos que tiene cada rol dentro de una editorial. (Ejemplo: El diseñador de una editorial solo puede atender los servicios de diseño; el crítico, solo puede atender los servicios de críticas)
CREATE TABLE EDITORIAL_MEMBER_ROLES_SERVICES (
	roleId VARCHAR(50) PRIMARY KEY,
	serviceId VARCHAR(50) NOT NULL,
    subServiceId VARCHAR(50) NULL
);

ALTER TABLE EDITORIAL_MEMBER_ROLES_SERVICES
ADD FOREIGN KEY (roleId) REFERENCES EDITORIAL_MEMBER_ROLES(id),
ADD FOREIGN KEY (serviceId) REFERENCES SERVICES(id),
ADD FOREIGN KEY (subServiceId) REFERENCES SUBSERVICES(id);

-- Estados de un pedido (Ejemplo: DISPONIBLE, TOMADO, ANULADO, HECHO)
CREATE TABLE ORDER_STATUS (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100) NOT NULL  
);

-- Pedidos de un servicio, hacia una persona o editorial. (Ejemplo, una persona pide una crítica a una editorial). Uno debe registrarse si quiere hacer pedidos directos.
CREATE TABLE ORDERS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  clientUserId INT(10) ZEROFILL UNSIGNED NULL, -- En caso sea un usuario registrado, los otros campos clientXXX ya no son necesarios
  clientEmail VARCHAR(200) NULL,
  clientNames VARCHAR(200) NULL,  
  clientAge TINYINT NULL,
  clientPhone VARCHAR(50) NULL,
  clientAppId VARCHAR(50) NULL,  
  workerUserId INT(10) ZEROFILL UNSIGNED NULL,  -- Adquiere valor cuando se hace una petición directa al usuario o cuando lo toma desde su editorial. En este último caso, el campo editorialId también adquiere el id de la editorial.
  editorialId INT(10) ZEROFILL UNSIGNED NULL, -- Solo adquiere un valor cuando se hace la petición a una editorial
  serviceId VARCHAR(50) NOT NULL,
  subServiceId VARCHAR(50) NULL,
  statusId VARCHAR(50) NOT NULL,
  price DOUBLE NULL DEFAULT 0,
  currency VARCHAR(50) NULL DEFAULT 'USD',
  titleWork VARCHAR(200) NULL,
  linkWork VARCHAR(500) NULL,
  pseudonym VARCHAR(200) NULL,
  synopsis VARCHAR(500) NULL,
  details VARCHAR(500) NULL,
  intention VARCHAR(500) NULL,
  mainPhrase VARCHAR(200) NULL,
  urlImgRef VARCHAR(500) NULL,
  critiqueTopics JSON NULL DEFAULT '[]',
  extraData JSON NULL DEFAULT '[]',
  publicResult BOOLEAN NOT NULL DEFAULT 1, -- Esto define si el link a la obra puede quedar público en el portafolio del autor
  resultUrl VARCHAR(500) NULL DEFAULT NULL,
  numHearts INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numComments INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numViews INT NOT NULL DEFAULT 0, -- BY TRIGGER
  public BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE ORDERS
  ADD FOREIGN KEY (clientUserId) REFERENCES USERS(id),
  ADD FOREIGN KEY (clientAppId) REFERENCES CONTACT_APPS(id),
  ADD FOREIGN KEY (workerUserId) REFERENCES USERS(id),
  ADD FOREIGN KEY (editorialId) REFERENCES EDITORIALS(id),
  ADD FOREIGN KEY (serviceId) REFERENCES SERVICES(id),
  ADD FOREIGN KEY (subServiceId) REFERENCES SUBSERVICES(id),
  ADD FOREIGN KEY (statusId) REFERENCES ORDER_STATUS(id);

-- Revista
CREATE TABLE MAGAZINE (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(500) NOT NULL,
  urlPortrait VARCHAR(500) NOT NULL,
  url VARCHAR(500) NOT NULL,
  numPag INT NOT NULL,
  edition INT NOT NULL,
  year INT NOT NULL,
  numHearts INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numComments INT NOT NULL DEFAULT 0, -- BY TRIGGER
  numViews INT NOT NULL DEFAULT 0, -- BY TRIGGER
  alias VARCHAR(200) NOT NULL
);

-- Estados de un comentario (Ejemplo: En revisión, aprobado, rechazado)
CREATE TABLE COMMENT_STATUS (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100) NOT NULL  
);

-- Comentarios de un pedido o una revista
CREATE TABLE COMMENTS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userId INT(10) ZEROFILL UNSIGNED NULL,
  orderId INT(10) ZEROFILL UNSIGNED NULL,
  magazineId INT(10) ZEROFILL UNSIGNED NULL,
  content VARCHAR(1000) NOT NULL,
  statusId VARCHAR(50) NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE COMMENTS
  ADD FOREIGN KEY (userId) REFERENCES USERS(id),
  ADD FOREIGN KEY (orderId) REFERENCES ORDERS(id),
  ADD FOREIGN KEY (magazineId) REFERENCES MAGAZINE(id),
  ADD FOREIGN KEY (statusId) REFERENCES COMMENT_STATUS(id);

-- Suscriptores
CREATE TABLE SUBSCRIBERS (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userId INT(10) ZEROFILL UNSIGNED NULL,
  courses BOOLEAN NOT NULL,
  magazine BOOLEAN NOT NULL,
  novelties BOOLEAN NOT NULL,
  names VARCHAR(200) NOT NULL,
  email VARCHAR(200) NOT NULL,
  active BOOLEAN NOT NULL DEFAULT 1,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  
);

ALTER TABLE SUBSCRIBERS
  ADD FOREIGN KEY (userId) REFERENCES USERS(id);

-- Acciones como ver, dar corazón, etc
CREATE TABLE ACTIONS_ON_ITEM (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100) NOT NULL  
);

-- Accion de cada usuario en una revista o pedido, etc (Ejemplo: X usuario dio un corazón en Z revista)
CREATE TABLE ACTIONS_BY_USER_ON_ITEM (
  id INT(10) ZEROFILL UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userId INT(10) ZEROFILL UNSIGNED NULL,
  orderId INT(10) ZEROFILL UNSIGNED NULL,
  magazineId INT(10) ZEROFILL UNSIGNED NULL,
  actionId VARCHAR(50) NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE ACTIONS_BY_USER_ON_ITEM
  ADD FOREIGN KEY (userId) REFERENCES USERS(id),
  ADD FOREIGN KEY (orderId) REFERENCES ORDERS(id),
  ADD FOREIGN KEY (magazineId) REFERENCES MAGAZINE(id),
  ADD FOREIGN KEY (actionId) REFERENCES ACTIONS_ON_ITEM(id);

-- Inserciones

-- INSERT INTO events VALUES (DEFAULT,'Evento 1',DEFAULT,'https://www.youtube.com/watch?v=cD2bQH8-pos&t=424s&ab_channel=Ra%C3%BAlValverde',DEFAULT,'["Objetivo1", "Objetivo2"]','["Beneficio1", "Beneficio2"]','["Tema1","Tema2"]',0,NULL,DEFAULT,DEFAULT,DEFAULT,DEFAULT,'Título del evento','Cuéntame que es de tu vida y trataré de quererte todavía',DEFAULT,DEFAULT,'[{"name":"Obras llevadas al teatro","link":{"name":"Leer aquí","href":"https://www.google.com"}}]','GRAN-TEXTO-GUION-TEXTO-Y-NOVELA-CCADENA-1',DEFAULT,DEFAULT,DEFAULT);

-- INSERT INTO EVENT_DATES VALUES (DEFAULT, 0000000001,NOW(),NOW(),DEFAULT,DEFAULT, DEFAULT, DEFAULT);